openapi: 3.0.3
info:
  title: Sedeo
  description: ""
  version: 1.0.0
tags:
  - name: user
    description: All requests related to user
  - name: settlement
    description: All requests related to settlement
  - name: security
    description: All requests related to security
paths:

  /users/me:
    get:
      tags:
        - user
      summary: Fetch information about currently logged in user profile
      description: In response you will find information about user profile
      operationId: fetch-user-profile
      responses:
        '200':
          description: User profile fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '404':
          description: User was not found
        '409':
          description: Unexpected error occurred

  /users/friends:
    get:
      tags:
        - user
      summary: Fetch friends of a logged in user
      description: In response you will get friends of a logged in user
      operationId: fetch-user-friends
      responses:
        '200':
          description: User friends fetched successfully
          content:
            application/json:
              schema:
                properties:
                  friends:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserFriend'
        '409':
          description: Unexpected error occurred

  /users/friend-requests:
    get:
      tags:
        - user
      summary: Fetch friend requests of a logged in user
      description: In response you will get friend requests of a logged in user
      operationId: fetch-user-friend-requests
      responses:
        '200':
          description: User friend requests fetched successfully
          content:
            application/json:
              schema:
                properties:
                  friendRequests:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserFriend'
        '409':
          description: Unexpected error occurred
    post:
      tags:
        - user
      summary: Create a new friend request
      description: Use this endpoint to create a new friend request
      operationId: create-a-new-friend-request
      requestBody:
        description: User id of a friend request recipient
        content:
          application/json:
            schema:
              type: object
              properties:
                recipientUserId:
                  type: string
                  example: 1e95974a-14ed-11ee-be56-0242ac120002
      responses:
        '201':
          description: User friend request created successfully
        '409':
          description: Unexpected error occurred
    patch:
      tags:
        - user
      summary: Accept or reject a friend request
      description: Use this endpoint to accept or reject a friend request
      operationId: accept-or-reject-a-friend-request
      requestBody:
        description: |
          Status to which the friend request should be set to
          Allowed values: `rejected`, `accepted`
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: accepted
      responses:
        '200':
          description: Friend has been added successfully
        '400':
          description: Bad request
        '401':
          description: User is not authenticated
        '403':
          description: User is not authorized to access that resource
        '404':
          description: Friend request was not found
        '409':
          description: Unexpected error occurred

  /users/potential-friends:
    get:
      tags:
        - user
      summary: Fetch all potential friends for a logged in user
      description: In response you will get all potential friends given search phrase as a query parameter
      operationId: fetch-user-potential-friends
      parameters:
        - in: query
          name: search_phrase
          description: Search phrase by which the potential friends will be fetched
      responses:
        '200':
          description: User potential friends fetched successfully
          content:
            application/json:
              schema:
                properties:
                  potentialFriends:
                    type: array
                    items:
                      $ref: '#/components/schemas/PotentialFriend'
        '409':
          description: Unexpected error occurred

  /settlement-groups:
    get:
      tags:
        - settlement
      summary: Fetch all settled, pending or both types of settlement groups
      description: |
        In response you wil get settlement groups. You can specify status
        of the settlement group with a query parameter.
        
        Available query parameter values: `settled`, `pending`.
        
        When query parameter is not specified all kind of settlements groups will be fetched.
      operationId: fetch-settlement-groups
      parameters:
        - in: query
          name: status
          description: Status of the settlement groups to be fetched
      responses:
        '200':
          description: Settlement groups fetched successfully
          content:
            application/json:
              schema:
                properties:
                  settlementGroups:
                    type: array
                    items:
                      $ref: '#/components/schemas/SettlementGroup'
        '400':
          description: Bad request
        '401':
          description: User is not authenticated
        '409':
          description: Unexpected error occurred
    post:
      tags:
        - settlement
      summary: Create a settlement group
      description: |
        Create a settlement group with given groupId
      operationId: create-settlement-group
      requestBody:
        description: GroupId and title of settlement group to be created
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/SettlementGroup'
                - type: object
                  properties:
                    participantIds:
                      type: array
                      items:
                        type: string
                        example: '3dc197b6-ec2a-41e1-a31a-cdd2cb169cf0'
      responses:
        '201':
          description: Settlement group was created successfully
        '401':
          description: User is not authenticated
        '400':
          description: Bad request
        '409':
          description: Unexpected error occurred

  /settlement-groups/{groupId}/settlements:
    post:
      tags:
        - settlement
      summary: Create a new settlement for settlement group
      description: |
        Create a settlement for a settlement group referenced by groupId
      operationId: create-settlement-group
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    settlementId:
                      type: string
                      example: '3dc197b6-ec2a-41e1-a31a-cdd2cb169cf0'
                    title:
                      type: string
                      example: Dinner at McDonald's
                    totalValue:
                      type: integer
                      example: 200
                    settlementExchanges:
                      type: array
                      items:
                        type: object
                        properties:
                          exchangeId:
                            type: string
                            example: '3dc197b6-ec2a-41e1-a31a-cdd2cb169cf0'
                          debtorUserId:
                            type: string
                            example: '3dc197b6-ec2a-41e1-a31a-cdd2cb169cf0'
                          creditorUserId:
                            type: string
                            example: '3dc197b6-ec2a-41e1-a31a-cdd2cb169cf0'
                          exchangeValue:
                            type: integer
                            example: 50
      responses:
        '201':
          description: Settlement exchange created successfully
        '400':
          description: Bad request
        '401':
          description: User is not authenticated
        '403':
          description: User is not authorized to access that resource
        '409':
          description: Unexpected error occurred
    get:
      tags:
        - settlement
      summary: Fetch all settlements
      description: |
        Fetch all settlements for a group
      operationId: fetch-settlements
      responses:
        '200':
          description: Settlements fetched successfully
          content:
            application/json:
              schema:
                properties:
                  settlements:
                    type: array
                    items:
                      $ref: '#/components/schemas/Settlement'
        '400':
          description: Bad request
        '401':
          description: User is not authenticated
        '409':
          description: Unexpected error occurred

  /settlement-groups/{groupId}/settlements/{settlementId}:
    get:
      tags:
        - settlement
      summary: Fetch settlement details
      description: |
        Fetch settlement details given settlement id
      operationId: fetch-settlement-details
      responses:
        '200':
          description: Settlements details fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      title:
                        type: string
                        example: Dinner at McDonald's
                      totalValue:
                        type: integer
                        example: 200
                      settlementExchanges:
                        type: array
                        items:
                          type: object
                          properties:
                            exchangeId:
                              type: string
                              example: '3dc197b6-ec2a-41e1-a31a-cdd2cb169cf0'
                            debtorFirstName:
                              type: string
                              example: 'John'
                            debtorLastName:
                              type: string
                              example: 'Doe'
                            creditorFirstName:
                              type: string
                              example: 'Adam'
                            creditorLastName:
                              type: string
                              example: 'Savage'
                            exchangeValue:
                              type: integer
                              example: 50
        '400':
          description: Bad request
        '401':
          description: User is not authenticated
        '403':
          description: User is not authorized to access that resource
        '409':
          description: Unexpected error occurred

  /settlement-groups/{groupId}/settlements/{settlementId}/exchanges/{exchangeId}:
    patch:
      tags:
        - settlement
      summary: Settle an exchange
      description: Use this endpoint to settle an exchange
      operationId: settle-exchange
      requestBody:
        description: |
          Status to which exchange should be set to
          
          Allowed values: `settled`
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: settled
      responses:
        '200':
          description: Settlement has been settled successfully
        '400':
          description: Bad request
        '401':
          description: User is not authenticated
        '403':
          description: User is not authorized to access that resource
        '404':
          description: Exchange was not found
        '409':
          description: Unexpected error occurred

  /settlement-groups/{groupId}/participants:
    get:
      tags:
        - settlement
      summary: Fetch all settlement group participants
      description: |
        Fetch all participants for a settlement group
      operationId: fetch-settlement-group-participants
      responses:
        '200':
          description: Participants fetched successfully
          content:
            application/json:
              schema:
                properties:
                  participants:
                    type: array
                    items:
                      $ref: '#/components/schemas/Participant'
        '403':
          description: User is not authorized to access that resource
        '400':
          description: Bad request
        '401':
          description: User is not authenticated
        '409':
          description: Unexpected error occurred

  /registration:
    post:
      tags:
        - security
      summary: Register a new user
      description: |
        Register a new user
      operationId: register-new-user
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: 'example@email.com'
                firstName:
                  type: string
                  example: Joe
                lastName:
                  type: string
                  example: Doe
                phoneNumber:
                  type: string
                  example: 543678921
                password:
                  type: string
                  example: somePassword123#
      responses:
        '201':
          description: User created successfully
        '400':
          description: Bad request
        '409':
          description: Unexpected error occurred | User with that email or phone number already exists

  /login:
    post:
      tags:
        - security
      summary: Login as a user
      description: |
        Login as a user
      operationId: login-as-user
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: 'example@email.com'
                password:
                  type: string
                  example: somePassword123#
      responses:
        '201':
          description: User logged in successfully
          content:
            application/json:
              schema:
                properties:
                  jwt:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                    .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ
                    .SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        '400':
          description: Bad request
        '401':
          description: User is not authenticated
        '409':
          description: Unexpected error occurred
components:
  schemas:

    UserProfileResponse:
      properties:
        userId:
          type: string
          example: 3dc197b6-ec2a-41e1-a31a-cdd2cb169cf0
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        phoneNumber:
          type: string
          example: 512348561
        email:
          type: string
          example: john.doe@example.com
        accountBalance:
          type: number
          example: 25.15

    UserFriend:
      properties:
        userId:
          type: string
          example: 3dc197b6-ec2a-41e1-a31a-cdd2cb169cf0
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        phoneNumber:
          type: string
          example: 512348561

    PotentialFriend:
      properties:
        userId:
          type: string
          example: 3dc197b6-ec2a-41e1-a31a-cdd2cb169cf0
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        phoneNumber:
          type: string
          example: 512348561

    SettlementGroup:
      properties:
        groupId:
          type: string
          example: 3dc197b6-ec2a-41e1-a31a-cdd2cb169cf0
        title:
          type: string
          example: Holidays in Denmark

    Settlement:
      properties:
        settlementId:
          type: string
          example: 3dc197b6-ec2a-41e1-a31a-cdd2cb169cf0
        totalValue:
          type: integer
          example: 250.15

    Participant:
      properties:
        userId:
          type: string
          example: 3dc197b6-ec2a-41e1-a31a-cdd2cb169cf0
        firstName:
          type: string
          example: Joe
        lastName:
          type: string
          example: Doe